<!DOCTYPE html>
<html lang="en">

<head>
    <script src="http://cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js"></script>
   
    <script src="http://cdn.oesmith.co.uk/morris-0.4.1.min.js"></script>
    <link href="https://fonts.googleapis.com/css?family=Orbitron" rel="stylesheet">
    <script src="//cdn.rawgit.com/Mikhus/canvas-gauges/gh-pages/download/2.1.5/all/gauge.min.js"></script>
<link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.css">
 <script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js"></script>
 <script src="//cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js"></script>
 <script src="//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.min.js"></script>
   <script src="http://code.jquery.com/jquery-1.8.2.min.js"></script>
  <style>
  #area-chart-sm,
#line-chart-sm,
#bar-chart-sm,
  #area-chart-hum,
#line-chart-hum,
#bar-chart-hum,
  #area-chart-temp,
#line-chart-temp,
#bar-chart-temp,
#stacked,
#pie-chart{
  min-height: 250px;,
  max-height:250px;
}
</head>

<style>
    table,
    th,
    td {
        text-align: center;
        border: 1px;
        border-collapse: collapse;
        padding-left: 50px;
        padding-right: 50px;
        
    }
h4{
    text-align:center;
}
    th,
    td {
        padding: 10px;
    }

    #area-chart,
    #line-chart,
    #bar-chart,
    #stacked,
    #pie-chart {
        min-height: 250px;
    }

    body {
        background: white;
    }
</style>

<body>
    <link rel="stylesheet" type="text/css" href="../assets/index.css">
    <header>
        <% include ./partials/header %>

    </header>

        <script>

            var xAxis = [];
            var yAxis = [];

            GetChartData();
            function GetChartData() {

                var url = "https://agripronode.herokuapp.com/api/webGetSensorData";
                //var reqData="farmid="+<%=fid%> +"&siteid="+<%=sid%>+"&sensor=sm&startdate=";
                var data = "farmid=" +<%=fid%> +"&siteid=" +<%=sid %> +"&sensor=sm&startdate=2018-01-01&enddate=2018-05-05";




                var xhttp = new XMLHttpRequest();
                ///////////////////////////////////////////MIN value set            
                //Sets the SM's min value
                xhttp.open("POST", url, true);
                xhttp.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200) {
                        if (this.responseText) {
                            var recievedData = JSON.parse(this.responseText);
                            console.log(this.responseText);
                            for (i in recievedData.sensordata) {
                                var d = recievedData.sensordata[i].date;
                                xAxis.push(JSON.stringify(d + ':00'));

                                var v = parseFloat(recievedData.sensordata[i].value);
                                yAxis.push(v.toFixed(2));

                                // console.log(xAxis);
                                //    console.log("X Axis  "+xAxis);
                            }
                            var xArray = Object.values(recievedData.sensordata[1]);

                            console.log("array " + typeof (xArray));
                            var myArray = xArray[0];
                            console.log("Myarray " + typeof (myArray));
                            yAxis.pop();
                            xAxis.pop();


                            console.log("X Axis  " + xAxis);
                            console.log("Y Axis  " + yAxis);
                            // populateChart(xAxis,yAxis);
                            console.log("plot " + xAxis);
                            //   console.log(graphs); 
                          
                            console.log(typeof (Object.values(xAxis)))
                            console.log(typeof (yAxis))
                            var trace1 = {
                                x: Object.values(xAxis),
                                y: Object.values(yAxis),
                                type: 'scatter'
                            };

                            var data = [trace1];
                            Plotly.newPlot('chartDiv', data);
                        }

                    }
                    else {
                        //      var x=JSON.parse(this.responseText);
                        //    console.log(x.sensordata);
                        //     return x.sensordata;
                    }
                };

                xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");

                xhttp.send(data);
            }


        </script>
<hr>
    </div>
    <div class="">
        <center>
            <table>
                <thead>
                    <th>
                        Humidity
                    </th>
                    <th>
                        Temperature
                    </th>
                    <th>
                        Soil Moisture
                    </th>

                </thead>
                <tbody>
                    <tr>
                        <td class="col-lg-4 col-sm-12 col-md-4">
                            <canvas id="humidityGuage" name="humidityGuage" data-type="radial-gauge" data-width="250" data-height="250" data-units="%"
                                data-major-ticks="0,20,40,60,80,100" data-minor-ticks="2" data-stroke-ticks="true" data-highlights='[
        {"from": 80, "to": 100, "color": "rgba(200, 50, 50, .75)"}
    ]' data-value="0" title="Humidity (%)" data-color-plate="#fff" data-border-shadow-width="0" data-borders="true" data-needle-type="arrow"
                                data-needle-width="2" data-needle-circle-size="7" data-needle-circle-outer="  " data-needle-circle-inner="true"
                                data-animation-duration="1500" data-animation-rule="linear"></canvas>

                        </td>
                        <td class="col-lg-4 col-sm-12 col-md-4">
                            <canvas style="padding-left=10px;" id="TemperatureGuage" name="TemperatureGuage" Title="Average Temperature (°C) at the site"
                                data-type="linear-gauge" data-width="100" data-height="250" data-units="°C" data-min-value="0"
                                data-max-value="100" data-major-ticks="0,20,40,60,80,100" data-minor-ticks="2" data-stroke-ticks="true"
                                data-highlights='[
                                    {"from": 80, "to": 100, "color": "rgba(200, 50, 50, .75)"}
                                    ]' data-value="0" data-label="Temperaure in Centigrade" data-color-plate="#fff" data-border-shadow-width="0"
                                data-borders="true" data-needle-type="arrow" data-needle-width="2" data-needle-circle-size="7"
                                data-needle-circle-outer="  " data-needle-circle-inner="true" data-animation-duration="1500"
                                data-animation-rule="linear"></canvas>

                        </td>
                        <td style="padding=100" class="col-lg-4 col-sm-12 col-md-4">
                            <canvas id="SoilMoistureGuage" name="SoilMoistureGuage" title="Volumetric Soil Moisture Content " padding-left="10px" style="padding-left=10px;"
                                data-type="radial-gauge" data-width="250" data-height="250" data-units="%" data-min-value="0"
                                data-max-value="100" data-major-ticks="0,20,40,60,80,100" data-minor-ticks="2" data-stroke-ticks="true"
                                data-highlights='[{"from": 80, "to": 100, "color": "rgba(200, 50, 50, .75)"}]' data-value="0"
                                data-color-plate="#fff" data-border-shadow-width="0" data-borders="true" data-needle-type="arrow"
                                data-needle-width="2" data-needle-circle-size="7" data-needle-circle-outer="  " data-needle-circle-inner="true"
                                data-animation-duration="1500" data-animation-rule="linear"></canvas>

                        </td>
                        <tr>
                </tbody>
            </table>
        </center>
    </div>

<hr>

<div class"row">
<h4>Temperature</h4>
    <div class="col-sm-6 text-center">
    
      <label class="label label-success"> Area Chart</label>
      <div id="area-chart-temp" ></div>
    </div>
    <div class="col-sm-6 text-center">
       <label class="label label-success">Line Chart</label>
      <div id="line-chart-temp"></div>
    </div>
    <div  class="col-sm-6 text-center">
       <label class="label label-success">Bar Chart</label>
      <div id="bar-chart-temp" ></div>
    </div>
    <div class="col-sm-6 text-center">
       <label class="label label-success"></label>
      <div id="stacked-temp" ></div>
    </div>
   
    
  </div>

<hr>

<div class"row">
<h4>Soil Moisture</h4>
    <div class="col-sm-6 text-center">
    
      <label class="label label-success">Area Chart</label>
      <div id="area-chart-sm" ></div>
    </div>
    <div class="col-sm-6 text-center">
       <label class="label label-success">Line Chart</label>
      <div id="line-chart-sm"></div>
    </div>
    <div  class="col-sm-6 text-center">
       <label class="label label-success">Bar Chart</label>
      <div id="bar-chart-sm" ></div>
    </div>
    <div class="col-sm-6 text-center">
       <label class="label label-success"></label>
      <div id="stacked-sm" ></div>
    </div>
   
    
  </div>

  <hr>

<div class"row">
<h4>Humidity</h4>
    <div class="col-sm-6 text-center">
      <label class="label label-success">Area Chart</label>
      <div id="area-chart-hum" ></div>
    </div>
    <div class="col-sm-6 text-center">
       <label class="label label-success">Line Chart</label>
      <div id="line-chart-hum"></div>
    </div>
    <div  class="col-sm-6 text-center">
       <label class="label label-success">Bar Chart</label>
      <div id="bar-chart-hum" ></div>
    </div>
    <div class="col-sm-6 text-center">
       <label class="label label-success"></label>
      <div id="stacked-hum" ></div>
    </div>
   
    
  </div>

    <script>
        //input: JSON Object
        //process: calculate the number of keys in the object
        //output: numebr oof keys / indexes in a certain object
        function count(obj) {
            return Object.keys(obj).length;
        }

        // Function to get the nth key from the object
        Object.prototype.getByIndex = function (index) {
            return this[Object.keys(this)[index]];
        };
        var xAxis = [];
        var yAxis = [];

        GetRanges();
        GetSensorData();
        // GetChartData();

        // function populateChart(X,Y){

        // console.log('X '+X);
        // console.log('Y '+Y);

        //     var data=[{
        //         x:X,
        //         y:Y,
        //         type:'bar'
        //     }];

        //     Plotly.newPlot('chartDiv', data);
        // }

        //Input: farm id, site id 
        //Process: get teh latest sensor data by makign a POST request, recieve data, parse it into JSON
        //output: Invoke the setGuageValues(data) funtion and pass the recieved 
        function GetSensorData() {

            var url = "https://agripronode.herokuapp.com/api/getLatestSensorData";
            var data = "farmid=" +<%=fid%> +"&siteid=" +<%=sid %>;
            var xhttp = new XMLHttpRequest();


            xhttp.open("POST", url, true);
            xhttp.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    console.log(this.responseText);
                    // return this.responseText;

                    if (this.responseText) {

                        var x = JSON.parse(this.responseText);

                        //-----------------------------------
                        //Code written for debugging
                        var Keylength = count(x);
                        Keylength = Keylength - 1;
                        console.log("x length " + Keylength);

                        console.log("last key " + Object.keys(x)[Keylength]);
                        var lastkey = Object.keys(x)[Keylength]

                        console.log("last  key value " + x[lastkey].hum);
                        //------------------------------------

                        //passing the reieceved response as JSON 
                        setGuageValues(x);


                    }
                }
                else {
                    console.log("error in output: " + this.responseText);

                    // if (this.responseText) {

                    //     var x = JSON.parse(this.responseText);
                    //     setGuageValues(x);
                    // }

                }
            };

            xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");

            xhttp.send(data);
        }

        //input: farm id, site id
        //process: get site's ranges of the sensors, generate list for data hightligts of gauges
        //output: sets the highlights in the gauges

        //@TODO: fix temperature ganuge max-value and min- value according to the ranges recieved i.e. add around 10-15 value difference in upper and lower limit
        function GetRanges() {

            var url = "https://agripronode.herokuapp.com/api/getMinMax";
            var data = "farmid=" +<%=fid%> +"&siteid=" +<%=sid %>;
            var xhttp = new XMLHttpRequest();


            xhttp.open("POST", url, true);
            xhttp.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    console.log(this.responseText);
                    // return this.responseText;

                    if (this.responseText) {

                        var x = JSON.parse(this.responseText);
                        console.log("x" + x.hum.max);
                        setHighLights(x);

                    }
                }
                else {
                    console.log("error in output: " + this.responseText);

                    if (this.responseText) {

                        var x = JSON.parse(this.responseText);
                        console.log("x" + x.hum.max);
                        setHighLights(x);

                    }

                }
            };

            xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");

            xhttp.send(data);

        }

        //Input: The latest humidty, temperature and soil moisture of a field for the day
        //process: As there are multiple times of reading on a certain day, the function finds the last key in the current date child
        //         and considers this as the latest value of sensors in the field
        //Output: updates the data-value attribute of the Linear-guages
        function setGuageValues(data) {
            var Keylength = count(data);
            Keylength = Keylength - 1;
            console.log("x length " + Keylength);

            console.log("last key " + Object.keys(data)[Keylength]);
            var lastkey = Object.keys(data)[Keylength]

            console.log("latest humidity " + data[lastkey].hum);
            console.log("latest humidity " + data[lastkey].temp);
            console.log("latest humidity " + data[lastkey].sm);
            document.getElementById("humidityGuage").setAttribute("data-value", data[lastkey].hum);
            document.getElementById("TemperatureGuage").setAttribute("data-value", data[lastkey].temp);
            document.getElementById("SoilMoistureGuage").setAttribute("data-value", data[lastkey].sm);
        }
        //Input: 
        //Process: sets the highlights of the linear-gauges
        function setHighLights(x) {
            //generating list for data highlists in the gauge for humidity
            var Humidityhighlight = '[{"from": 0, "to":' + x.hum.min + ', "color": "rgb(244, 65, 65)"},{"from": ' + x.hum.min + ', "to": ' + x.hum.max + ', "color": "rgb(58, 196, 86)"},{"from": ' + x.hum.max + ', "to": 100, "color": "rgb(244, 65, 65)"} ]';
            console.log("highlight" + Humidityhighlight);
            document.getElementById("humidityGuage").setAttribute("data-highlights", Humidityhighlight);


            //generating list for data highlights in the gauge for temperaure
            var Temperaturehighlight = '[{"from": 0, "to":' + x.temp.min + ', "color": "rgb(244, 65, 65)"},{"from": ' + x.temp.min + ', "to": ' + x.temp.max + ', "color": "rgb(58, 196, 86)"},{"from": ' + x.temp.max + ', "to": 100, "color": "rgb(244, 65, 65)"} ]';
            console.log("highlight" + Temperaturehighlight);
            document.getElementById("TemperatureGuage").setAttribute("data-highlights", Temperaturehighlight);

            //generating list for data highlists in the gauge for Soil moisture
            var SoilMoisturehighlight = '[{"from": 0, "to":' + x.sm.min + ', "color": "rgb(244, 65, 65)"},{"from": ' + x.sm.min + ', "to": ' + x.sm.max + ', "color": "rgb(58, 196, 86) "},{"from": ' + x.sm.max + ', "to": 100, "color": "rgb(244, 65, 65)"} ]';
            console.log("highlight" + SoilMoisturehighlight);
            document.getElementById("SoilMoistureGuage").setAttribute("data-highlights", SoilMoisturehighlight);

        }


        //returns teh number of keys in teh json object
        //input: json


        function ajaxRequest(url, data) {


        }
    </script>
    
  <script>
    $('.message a').click(function () {
      $('form').animate({ height: "toggle", opacity: "toggle" }, "slow");
    });
//---------------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------------

            var xAxis = [];
            var yAxis = [];

            GetChartData('sm');
            GetChartData('hum');
            GetChartData('temp');

            function GetChartData(SENSOR) {

                var url = "https://agripronode.herokuapp.com/api/webGetSensorData";
                //var reqData="farmid="+<%=fid%> +"&siteid="+<%=sid%>+"&sensor=sm&startdate=";
              console.log(SENSOR);
                var data = "farmid=" +<%=fid%> +"&siteid=" +<%=sid %> +"&sensor="+SENSOR+"&startdate=2018-04-25&enddate=2018-06-07";




                var xhttp = new XMLHttpRequest();
                ///////////////////////////////////////////MIN value set            
                //Sets the SM's min value
                xhttp.open("POST", url, true);
                xhttp.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200) {
                        if (this.responseText) {
                            var recievedData = JSON.parse(this.responseText);
                            console.log(this.responseText);
                          
if(SENSOR==='sm'){
  drawSM(recievedData.sensordata);
}
else if(SENSOR==='hum')
{
  drawHUM(recievedData.sensordata);
}    else{
      
 drawTEMP(recievedData.sensordata);
}                    
                        
                          // drawTEMP(recievedData.sensordata);
                          // console.log("Trace 1: "+ trace1)
                        }

                    }
                    else {
                        //      
                    }
                };

                xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");

                xhttp.send(data);
            }



function drawSM(sensorData){


var data = sensorData,
    config = {
      data: data,
      xkey: 'date',
      ykeys: ['value'],
      labels: ['Value'],
      fillOpacity: 0.6,
      hideHover: 'auto',
      behaveLikeLine: false,
      resize: true,
      pointFillColors:['#ffffff'],
      pointStrokeColors: ['black'],
      lineColors:['blue','red']
  };
config.element = 'area-chart-sm';
Morris.Area(config);
config.element = 'line-chart-sm';
Morris.Line(config);
config.element = 'bar-chart-sm';
Morris.Bar(config);

}


function drawHUM(sensorData){


var data = sensorData,
    config = {
      data: data,
      xkey: 'date',
      ykeys: ['value'],
      labels: ['Value'],
      fillOpacity: 0.6,
      hideHover: 'auto',
      behaveLikeLine: false,
      resize: true,
      pointFillColors:['#ffffff'],
      pointStrokeColors: ['black'],
      lineColors:['cyan','red']
  };
config.element = 'area-chart-hum';
Morris.Area(config);
config.element = 'line-chart-hum';
Morris.Line(config);
config.element = 'bar-chart-hum';
Morris.Bar(config);

}

function drawTEMP(sensorData){


var data = sensorData,
    config = {
      data: data,
      xkey: 'date',
      ykeys: ['value'],
      labels: ['Value'],
      fillOpacity: 0.6,
      hideHover: 'auto',
      behaveLikeLine: false,
      resize: true,
      pointFillColors:['#ffffff'],
      pointStrokeColors: ['black'],
      lineColors:['red','green']
  };
config.element = 'area-chart-temp';
Morris.Area(config);
config.element = 'line-chart-temp';
Morris.Line(config);
config.element = 'bar-chart-temp';
Morris.Bar(config);

}

  </script>
    <style>
        /* set the CSS */

        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2px;
        }
    </style>



</body>

</html>